
/* ==========================================================================
  Variables
   ========================================================================== */ 

$primarycolor: #4f2683;
$primarycolor_dark: darken($primarycolor, 6%);
$primarycolor_meddark: darken($primarycolor, 15%);
$primarycolor_verydark: darken($primarycolor, 30%);
$primarycolor_light: lighten($primarycolor, 10%);
$primarycolor_medlight: lighten($primarycolor, 20%);
$primarycolor_verylight: lighten($primarycolor, 40%);
$secondarycolor: #f68e1d;
$secondarycolor_dark: darken($secondarycolor, 6%);
$secondarycolor_meddark: darken($secondarycolor, 15%);
$secondarycolor_verydark: darken($secondarycolor, 30%);
$secondarycolor_light: lighten($secondarycolor, 10%);
$secondarycolor_medlight: lighten($secondarycolor, 20%);
$secondarycolor_verylight: lighten($secondarycolor, 40%);
$textcolor: #686868;
$textcolor_dark: darken($textcolor, 10%);
$textcolor_meddark: darken($textcolor, 20%);
$textcolor_verydark: darken($textcolor, 30%);
$textcolor_light: lighten($textcolor, 10%);
$textcolor_medlight: lighten($textcolor, 25%);
$textcolor_verylight: lighten($textcolor, 40%);
$offsetcolor: #cccccc;
$offsetcolor_light: lighten($offsetcolor, 5%);
$offsetcolor_medlight: lighten($offsetcolor, 10%);
$offsetcolor_verylight: lighten($offsetcolor, 20%);
$offsetcolor_dark: darken($offsetcolor, 10%);
$offsetcolor_meddark: darken($offsetcolor, 20%);
$offsetcolor_verydark: darken($offsetcolor, 30%);
$darkcolor: #222222;
$darkcolor_light: lighten($darkcolor, 10%);
$darkcolor_dark: darken($darkcolor, 10%);
$darkcolor_meddark: darken($darkcolor, 25%);
$alertcolor: #c40000;
$alertcolor_dark: darken($alertcolor, 10%);
$alertcolor_meddark: darken($alertcolor, 20%);
$alertcolor_verydark: darken($alertcolor, 30%);
$alertcolor_light: lighten($alertcolor, 20%);
$alertcolor_medlight: lighten($alertcolor, 35%);
$alertcolor_verylight: lighten($alertcolor, 55%);
$successcolor: #00b548;
$successcolor_dark: darken($successcolor, 10%);
$successcolor_meddark: darken($successcolor, 20%);
$successcolor_verydark: darken($successcolor, 30%);
$successcolor_light: lighten($successcolor, 20%);
$successcolor_medlight: lighten($successcolor, 35%);
$successcolor_verylight: lighten($successcolor, 55%);


/* ==========================================================================
   Mixins
   ========================================================================== */ 

@mixin fontsize($size:1.6, $line: $size * 1.5){
    font-size:   ($size * 10) + px;
    line-height: ($line * 10) + px;
    font-size:   $size + rem;
  	line-height: $line + rem;
}
@mixin rgba-background($color, $opacity) {
	$rgba: rgba($color, $opacity);
	$IEcolor: ie_hex_str($rgba);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$IEcolor}', endColorstr='#{$IEcolor}', GradientType=0 );
	background: $rgba;
}
@mixin display-flex {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
@mixin display-flex-old {
    -webkit-box-orient: vertical;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
}
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex($fg: 1, $fs: null, $fb: null) { 
    $fg-boxflex: $fg;
    @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
    }
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}
@mixin center($axis: "both"){
    position:absolute;
    @if $axis == "y"{
        top:50%;
        -webkit-transform: translateY(-50%);
        -moz-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        -o-transform: translateY(-50%);
        transform: translateY(-50%);
    }
    @if $axis == "x"{
        left:50%;
        -webkit-transform: translateX(-50%);
        -moz-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        -o-transform: translateX(-50%);
        transform: translateX(-50%);
    }
    @if $axis == "both"{
        top:50%;
        left:50%;
        -webkit-transform: translate(-50%, -50%);
        -moz-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        -o-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

/* Fonts */

@mixin primaryfont() {
	font-family: arial, helvetica, sans-serif;
}
@mixin secondaryfont() {
	font-family: georgia, times, serif;
}

/* Breakpoints */

@mixin bp($point) {
    @if $point == desktopsmall {
        @media (max-width: 1050px) { @content; }
    }
    @else if $point == tabletlarge {
        @media (max-width: 900px) { @content; }
    }
    @else if $point == tablet {
        @media (max-width: 767px)  { @content; }
    }
    @else if $point == tabletsmall {
        @media (max-width: 600px)  { @content; }
    }
    @else if $point == mobile {
        @media (max-width: 400px)  { @content; }
    }
}
