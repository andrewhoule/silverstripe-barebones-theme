
// Helper Mixins

@function _true-is-equal($one, $two) {
  @if type-of($one) == number and type-of($two) == number {
    @if unit($one) == unit($two) {
      @return $one == $two;
    } @else {
      @return false;
    }
  } @else {
    @return $one == $two;
  }
}

@mixin rem($property, $values) {
  $font-size: 16px;
  $px-values: ();
  $rem-values: ();
  @each $value in $values {
    @if _true-is-equal($value, 0) {
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, unquote('#{$new-rem-value}rem'));
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == '%') {
      $px-values: join($px-values, unquote('#{$value}'));
      $rem-values: join($rem-values, unquote('#{$value}'));
    } @else if $value == auto {
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, unquote('#{$value}rem'));
    }
  }
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@function solid-lighten($color, $percentage) {
  @return lighten($color, (1-$percentage)*5%);
}

@function solid-darken($color, $percentage) {
  @return darken($color, (1-$percentage)*5%);
}

@mixin rgba($type, $color, $percentage, $shade: ligthen) {
  @if $shade == lighten {
    @if $type == color {
      color: solid-lighten($color, $percentage);
      color: rgba($color, $percentage);
    }
    @if $type == bg {
      background-color: solid-lighten($color, $percentage);
      background-color: rgba($color, $percentage);
    }
  } @else {
    @if $type == color {
      color: solid-darken($color, $percentage);
      color: rgba($color, $percentage);
    }
    @if $type == bg {
      background-color: solid-darken($color, $percentage);
      background-color: rgba($color, $percentage);
    }
  }
}

@mixin opacity($opacity) {
  filter: alpha(opacity=($opacity * 100));
  opacity: $opacity;
}

@mixin absolutecenter($axis: 'both') {
  position: absolute;
  @if $axis == 'y' {
    @include transform(translateY(-50%));
    top: 50%;
  }
  @if $axis == 'x' {
    @include transform(translateX(-50%));
    left: 50%;
  }
  @if $axis == 'both' {
    @include transform(translate(-50%, -50%));
    left: 50%;
    top: 50%;
  }
}

@mixin ctr($args...) {
  @include absolutecenter($args...);
}

@mixin unabsolutecenter {
  @include transform(translate(0, 0));
  left: inherit;
  position: inherit;
  top: inherit;
}

@mixin unctr($args...) {
  @include unabsolutecenter($args...);
}

@mixin triangle($direction, $size: .375rem, $color: #222) {
  content: '';
  display: block;
  height: 0;
  position: absolute;
  width: 0;
  @if ($direction == 'up') {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  } @else if ($direction == 'down') {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else if ($direction == 'left') {
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    border-top: $size solid transparent;
  } @else if ($direction == 'right') {
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    border-top: $size solid transparent;
  }
}
